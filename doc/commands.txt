1. Hand-shaking (for serial port only)
   HOST   sends  0x55 0x55 0x55 ... 0x55
   DEVICE replys 0xAA 0xAA 0xAA ... 0xAA
   HOST can confirm that DEVICE is ready when receives 0xAA and can continue the communication.

2. Packet format (in hex) in communication between HOST and DEVICE
     {start} {crc8} {type} {reg_addr} {status} {length} {payload}

     {start}         1 byte
                     0xAA if packet is from HOST to DEVICE
                     0x55 if packet is from DEVICE to HOST
     {crc8}          1 byte
                     crc8 of the packet except {start} and {crc8}
                     crc8 = 0x00 means bypass CRC checking
     {type}          1 byte
                     0x01 = register SET
                     0x02 = register GET
     {reg_addr}      1 byte
     {status}        1 byte
                     0x00: Invalid and can be ignored
                     0x01: SUCCESS
                     0x80: Generic Error
                     0x81: CRC error
     {length}        1 bytes
                     number of bytes in payload
     {data}          0~128 bytes
                     payload

3. Register memory map
    // MCU information & bootloader control
    REG_00h[128] RO   ASCII       MCU Part Number
    REG_01h[128] RO   ASCII       MCU UUID
    REG_02h[3]   RO   uint8_t[]   Bootloader Version
    REG_03h[4]   RO   uint32_t    Bootloader start FLASH address
    REG_04h[4]   RO   uint32_t    Bootloader size

    REG_0Fh[2]   RW   uint16_t    Exit bootloader & reset
                                  [7:0] delay time before exit

    // FLASH information
    REG_10h[4]   RO   uint32_t    FLASH start address
    REG_11h[4]   RO   uint32_t    FLASH size
    REG_12h[4]   RO   uint32_t    number of FLASH sectors
    REG_13h[4]   RO   uint32_t    supported FLASH access data width
                                  [7] WR full sector
                                  [6] WR uint32_t
                                  [5] WR uint16_t
                                  [4] WR uint8_t
                                  [3] RD full sector
                                  [2] RD uint32_t
                                  [1] RD uint16_t
                                  [0] RD uint8_t
    REG_14h[4]   RO   uint32_t    Max. FLASH sector erase time
    REG_15h[4]   RO   uint32_t    Max. FLASH sector program time
    REG_16h[4]   RO   uint32_t    Max. FLASH mass erase time

    // EEPROM information
    REG_20h[4]   RO   uint32_t    EEPROM start address
    REG_21h[4]   RO   uint32_t    EEPROM size
    REG_22h[4]   RO   uint32_t    number of EEPROM sectors
    REG_23h[4]   RO   uint32_t    supported EEPROM access data width
                                  [7] WR full sector
                                  [6] WR uint32_t
                                  [5] WR uint16_t
                                  [4] WR uint8_t
                                  [3] RD full sector
                                  [2] RD uint32_t
                                  [1] RD uint16_t
                                  [0] RD uint8_t
    REG_24h[4]   RO   uint32_t    Max. EEPROM sector erase time
    REG_25h[4]   RO   uint32_t    Max. EEPROM sector program time
    REG_26h[4]   RO   uint32_t    Max. EEPROM mass erase time

    // FLASH operation
    REG_30h[1]   WO   uint8_t     FLASH erase/verify
                                  write 0x81 = erase full chip FLASH
                                  write 0x82 = erase selected FLASH sector
                                  write 0x01 = calculate CRC-8 of full chip FLASH
                                  write 0x02 = calculate CRC-8 of the selected FLASH sector
    REG_31h[4]   RW               FLASH sector select
    REG_32h[4]   RO               FLASH sector start address
    REG_33h[4]   RO               FLASH sector size
    REG_34h[4]   RW   uint32_t    FLASH address offset pointer (auto increase)
    REG_35h[128] RW   uint8_t[]   FLASH data

    // EEPROM operation
    REG_40h[1]   WO   uint8_t     EEPROM erase/verify
                                  write 0x81 = erase full chip EEPROM
                                  write 0x82 = erase selected EEPROM sector
                                  write 0x01 = calculate CRC-8 of full chip EEPROM
                                  write 0x02 = calculate CRC-8 of the selected EEPROM sector
    REG_41h[4]   RW               EEPROM sector select
    REG_42h[4]   RO               EEPROM sector start address
    REG_43h[4]   RO               EEPROM sector size
    REG_44h[4]   RW   uint32_t    EEPROM address offset pointer (auto increase)
    REG_45h[128] RW   uint8_t[]   EEPROM data

4. Enter bootloader command
   "bootloader -p {%s}\r\n"

