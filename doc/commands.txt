1. Hand-shaking (for serial port only)
   HOST   sends  0x55 0x55 0x55 ... 0x55
   DEVICE replys 0xAA 0xAA 0xAA ... 0xAA
   HOST can confirm that DEVICE is ready when receives 0xAA and can continue the communication.

2. Packet format (in hex) in communication between HOST and DEVICE
     {start} {length} {payload} {crc8}

     {start}    1 byte
                0xAA if packet is from HOST to DEVICE
                0x55 if packet is from DEVICE to HOST

     {length}   1 byte
                number of bytes in payload

     {payload}  1~128 bytes
                payload of the packet

     {crc8}     1 byte
                crc8 of payload part
                crc8 = 0x00 means bypass CRC checking

3. Payload format in a packet
   > register SET: [type=0x01] [reg_addr] [byte0] [byte1] ... [byteN]
   > register STS: [type=0x10] [reg_addr] [status_code]
   > register GET: [type=0x02] [reg_addr] [num_of_byte]
   > register REP: [type=0x20] [reg_addr] [byte0] [byte1] ... [byteN]

     type       1-byte
                packet payload type
                0x01 = register SET, sent from HOST to DEVICE to set register data
                0x02 = register GET, sent from HOST to DEVICE to get register data
                0x10 = register STS, sent from DEVICE to HOST to inform HOST command processing status after a SET operation
                0x20 = register REP, sent from DEVICE to HOST to reply the register data after a GET operation

    status code
                [7]   STS_BUSY
                [6]   STS_FAIL
                [5:0] Last operation status
                      > STS_BUSY=1, STS_FAIL=X (IN PROGRESS)
                      00h=Reserved
                      01h=CMD is captured but not processed
                      02h=CMD checking is in progress
                      03h=CMD execution is in progress
                      04h-3Fh=Reserved
                      > STS BUSY=0, STS_FAIL=0 (SUCCESS)
                      00h=Reserved
                      01h=CMD completed successfully without specific message
                      02h-3Fh=Reserved
                      > STS_BUSY=0, STS_FAIL=1 (FAILED)
                      00h=Reserved
                      01h=Unknown error
                      02h=Parameter range error or not supported
                      03h-0Fh=Reserved
                      10-1Fh=FLASH operation error code
                      20-2Fh=EEPROM operation error code
                      30-3Fh=Reserved
4. Register memory map
    // MCU information & bootloader control
    REG_00h[128] RO   ASCII       MCU Part Number
    REG_01h[128] RO   ASCII       MCU UUID
    REG_02h[3]   RO   uint8_t[]   Bootloader Version
    REG_03h[4]   RO   uint32_t    Bootloader start FLASH address
    REG_04h[4]   RO   uint32_t    Bootloader size

    REG_0Eh[8]   RW   uint8_t     Application firmware ImageA&B FLASH address
    REG_0Fh[2]   RW   uint16_t    Exit bootloader & reset
                                  [7:0] delay time before exit

    // FLASH information
    REG_10h[4]   RO   uint32_t    FLASH start address
    REG_11h[4]   RO   uint32_t    FLASH size
    REG_12h[4]   RO   uint32_t    number of FLASH sectors
    REG_13h[4]   RO   uint32_t    supported FLASH access data width
                                  [7] WR full sector
                                  [6] WR uint32_t
                                  [5] WR uint16_t
                                  [4] WR uint8_t
                                  [3] RD full sector
                                  [2] RD uint32_t
                                  [1] RD uint16_t
                                  [0] RD uint8_t
    REG_14h[4]   RO   uint32_t    Max. FLASH sector erase time
    REG_15h[4]   RO   uint32_t    Max. FLASH sector program time
    REG_16h[4]   RO   uint32_t    Max. FLASH mass erase time

    // EEPROM information
    REG_20h[4]   RO   uint32_t    EEPROM start address
    REG_21h[4]   RO   uint32_t    EEPROM size
    REG_22h[4]   RO   uint32_t    number of EEPROM sectors
    REG_23h[4]   RO   uint32_t    supported EEPROM access data width
                                  [7] WR full sector
                                  [6] WR uint32_t
                                  [5] WR uint16_t
                                  [4] WR uint8_t
                                  [3] RD full sector
                                  [2] RD uint32_t
                                  [1] RD uint16_t
                                  [0] RD uint8_t
    REG_24h[4]   RO   uint32_t    Max. EEPROM sector erase time
    REG_25h[4]   RO   uint32_t    Max. EEPROM sector program time
    REG_26h[4]   RO   uint32_t    Max. EEPROM mass erase time

    // FLASH operation
    REG_30h[1]   RW   uint8_t     FLASH erase/verify
                                  write 0x81 = erase full chip FLASH
                                  write 0x82 = erase selected FLASH sector
                                  write 0x01 = calculate CRC-8 of full chip FLASH
                                  write 0x02 = calculate CRC-8 of the selected FLASH sector
                                  read  0x00 = FLASH operation done
    REG_31h[4]   RW               FLASH sector select
    REG_32h[4]   RO               FLASH sector start address
    REG_33h[4]   RO               FLASH sector size
    REG_34h[4]   RW   uint32_t    WR FLASH address offset pointer (auto increase)
    REG_35h[128] RW   uint8_t[]   WR FLASH data
    REG_36h[4]   RW   uint32_t    RD FLASH address offset pointer (auto increase)
    REG_37h[128] RW   uint8_t[]   RD FLASH data

    // EEPROM operation
    REG_40h[1]   RW   uint8_t     EEPROM erase/verify
                                  write 0x81 = erase full chip EEPROM
                                  write 0x82 = erase selected EEPROM sector
                                  write 0x01 = calculate CRC-8 of full chip EEPROM
                                  write 0x02 = calculate CRC-8 of the selected EEPROM sector
                                  read  0x00 = EEPROM operation done
    REG_41h[4]   RW               EEPROM sector select
    REG_42h[4]   RO               EEPROM sector start address
    REG_43h[4]   RO               EEPROM sector size
    REG_44h[4]   RW   uint32_t    WR EEPROM address offset pointer (auto increase)
    REG_45h[128] RW   uint8_t[]   WR EEPROM data
    REG_46h[4]   RW   uint32_t    RD EEPROM address offset pointer (auto increase)
    REG_47h[128] RW   uint8_t[]   RD EEPROM data

5. Enter bootloader command
   "bootloader -p {%s}\r\n"

