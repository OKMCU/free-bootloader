1. Hand-shaking (for serial port only)
   handshaking machanism is removed

2. Packet format (in hex) in communication between HOST and DEVICE
     {start} {crc8} {type} {reg_addr} {status} {length} {payload}

     {start}         1 byte
                     0xAA if packet is from HOST to DEVICE
                     0x55 if packet is from DEVICE to HOST
     {crc8}          1 byte
                     crc8 of the packet except {start} and {crc8}
                     crc8 = 0x00 means bypass CRC checking
     {type}          1 byte
                     0x01 = register SET
                     0x02 = register GET
     {reg_addr}      1 byte
     {status}        1 byte
                     0x00: Invalid and can be ignored
                     0x01: SUCCESS
                     0x80: Generic Error
                     0x81: CRC error
     {length}        1 bytes
                     number of bytes in payload
     {data}          0~128 bytes
                     payload

3. Register memory map
    // MCU information & bootloader control
    REG_00h[128] R/-  char[]      MCU Part Number
    REG_01h[128] R/-  char[]      MCU UUID
    REG_02h[4]   R/-  uint8_t[]   Bootloader Version
                                  Byte[0] = Major Version
                                  Byte[1] = Minor Version
                                  Byte[2] = Build Version MSB
                                  Byte[3] = Build Version LSB
    REG_03h[4]   R/-  uint32_t    Bootloader start FLASH address
    REG_04h[4]   R/-  uint32_t    Bootloader size

    REG_0Eh[128] -/W  char[]      Password
    REG_0Fh[2]   -/W  uint32_t    Write image commit signature to commit image&eeprom and reset to APPCODE

    // FLASH information
    REG_10h[4]   R/-  uint32_t    FLASH start address
    REG_11h[4]   R/-  uint32_t    FLASH size
    REG_12h[4]   R/-  uint32_t    number of FLASH sectors
    REG_13h[4]   R/-  uint32_t    supported FLASH program width
                                  [7] WR Qual Word
                                  [6] WR Double Word
                                  [5] WR Word
                                  [4] WR Byte
                                  [3] RD Qual Word
                                  [2] RD Double Word
                                  [1] RD Word
                                  [0] RD Byte
    REG_14h[4]   R/-  uint32_t    Max. FLASH page erase time
    REG_15h[4]   R/-  uint32_t    Max. FLASH page program time

    // FLASH operation
    REG_18h[1]   -/W  uint8_t     FLASH erase/verify
                                  write 0x01 = erase selected FLASH page
                                  write 0x02 = calculate CRC-8 of the selected FLASH page
    REG_19h[4]   R/W  int32_t     FLASH page select
    REG_1Ah[4]   R/-  uint32_t    FLASH page start address
    REG_1Bh[4]   R/-  uint32_t    FLASH page size
    REG_1Ch[4]   R/W  uint32_t    FLASH address offset pointer (auto increase)
    REG_1Dh[128] R/W  uint8_t[]   FLASH data

    // EEPROM information
    REG_20h[4]   R/-  uint32_t    Virtual EEPROM FLASH start address
    REG_21h[4]   R/-  uint32_t    EEPROM size
    REG_22h[4]   R/-  uint32_t    number of EEPROM sectors
    REG_23h[4]   R/-  uint32_t    Reserved
    REG_24h[4]   R/-  uint32_t    Max. EEPROM page erase time
    REG_25h[4]   R/-  uint32_t    Max. EEPROM page program time

    // EEPROM operation
    REG_28h[1]   -/W  uint8_t     EEPROM erase/verify
                                  write 0x01 = erase selected EEPROM page
                                  write 0x02 = calculate CRC-8 of the selected EEPROM page
    REG_29h[4]   R/W  int32_t     EEPROM page select
    REG_2Ah[4]   R/-  uint32_t    EEPROM page start address
    REG_2Bh[4]   R/-  uint32_t    EEPROM page size
    REG_2Ch[4]   R/W  uint32_t    EEPROM address offset pointer (auto increase)
    REG_2Dh[128] R/W  uint8_t[]   EEPROM data

4. Enter bootloader command
   "bootloader -p {%s}\r\n"

